{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t2mDu1BpyDgn"
      },
      "source": [
        "# **Construindo o database**\n",
        "\n",
        "Aqui vamos transformar os PDFs baixados pelos crawlers em um database que funcione para o fine-tuning. Para isso, seguiremos os seguintes passos:\n",
        "1. Gerar o arquivo .txt a partir dos PDFs\n",
        "2. Limpar e normalizar o arquivo\n",
        "3. Estruturar os dados em .json"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bsGd8x6Px6YH"
      },
      "source": [
        "**1. Gerando o arquivo .txt a partir dos múltiplos pdfs**\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Montar o Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Listar Arquivos PDF no Google Drive\n",
        "import os\n",
        "\n",
        "# Defina o caminho para a pasta onde os PDFs estão armazenados\n",
        "pdf_folder_path = '/content/drive/MyDrive/machado'\n",
        "\n",
        "# Liste todos os arquivos PDF na pasta\n",
        "pdf_files = [os.path.join(pdf_folder_path, f) for f in os.listdir(pdf_folder_path) if f.endswith('.pdf')]\n",
        "\n",
        "# Verifique os arquivos listados\n",
        "print(pdf_files)\n",
        "\n",
        "# Extração do Texto de Vários PDFs\n",
        "!pip install pdfplumber\n",
        "import pdfplumber\n",
        "\n",
        "def extract_text_from_pdfs(pdf_files):\n",
        "    all_texts = []\n",
        "    for file_path in pdf_files:\n",
        "        text = \"\"\n",
        "        with pdfplumber.open(file_path) as pdf:\n",
        "            for page in pdf.pages:\n",
        "                text += page.extract_text()\n",
        "        all_texts.append(text)\n",
        "    return all_texts\n",
        "\n",
        "# Uso da função\n",
        "pdf_texts = extract_text_from_pdfs(pdf_files)\n",
        "\n",
        "# Verifique o texto extraído\n",
        "for i, text in enumerate(pdf_texts):\n",
        "    print(f\"Texto do PDF {i+1}:\\n{text[:500]}\\n\")\n",
        "\n",
        "# Função para quebrar o texto em linhas de até 1000 caracteres\n",
        "def break_text_into_lines(text, max_length=1000):\n",
        "    lines = []\n",
        "    for i in range(0, len(text), max_length):\n",
        "        lines.append(text[i:i+max_length])\n",
        "    return '\\n'.join(lines)\n",
        "\n",
        "# Salvar em um Único Arquivo Consolidado\n",
        "output_file_path = '/content/drive/MyDrive/textos.txt'\n",
        "\n",
        "with open(output_file_path, 'w', encoding='utf-8') as f:\n",
        "    for text in pdf_texts:\n",
        "        f.write(break_text_into_lines(text) + '\\n\\n')"
      ],
      "metadata": {
        "id": "TveQbhVFDjHd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Contar o número de linhas no arquivo final\n",
        "with open(output_file_path, 'r', encoding='utf-8') as f:\n",
        "    line_count = sum(1 for line in f)\n",
        "\n",
        "print(f\"O arquivo final contém {line_count} linhas.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iS7AVxqgD7Wo",
        "outputId": "a319ba44-62be-45ad-a681-38f870614a50"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "O arquivo final contém 306409 linhas.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dX3iWd66ze2v"
      },
      "source": [
        "**Limpando e Normalizando o arquivo txt**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vnUK2NEUzmtn",
        "outputId": "83a93ab8-3e80-4ac2-c76a-7d3cb6f6a03a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "Texto limpo salvo em: /content/drive/MyDrive/machado/textonormalizado1000.txt\n",
            "O número de linhas no arquivo de texto limpo é: 306409\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)\n",
        "import re\n",
        "\n",
        "def clean_text(line):\n",
        "    # Remover múltiplos espaços\n",
        "    line = re.sub(r'\\s+', ' ', line)  # Substitui múltiplos espaços por um único espaço\n",
        "    # Remover caracteres especiais, se necessário\n",
        "    line = re.sub(r'[^\\w\\s,.!?;:]', '', line)  # Remove caracteres não alfanuméricos, mantendo pontuação básica\n",
        "    return line.strip()\n",
        "\n",
        "# Caminho do arquivo de texto a ser limpo\n",
        "input_file_path = '/content/drive/MyDrive/textos.txt'\n",
        "\n",
        "# Ler o conteúdo do arquivo linha por linha, limpando cada linha\n",
        "cleaned_lines = []\n",
        "with open(input_file_path, 'r', encoding='utf-8') as f:\n",
        "    for line in f:\n",
        "        cleaned_line = clean_text(line)\n",
        "        cleaned_lines.append(cleaned_line)\n",
        "\n",
        "# Caminho do arquivo de saída para o texto limpo\n",
        "output_file_path = '/content/drive/MyDrive/machado/textonormalizado1000.txt'\n",
        "\n",
        "# Salvar o texto limpo em um novo arquivo, linha por linha\n",
        "with open(output_file_path, 'w', encoding='utf-8') as f:\n",
        "    for cleaned_line in cleaned_lines:\n",
        "        f.write(cleaned_line + '\\n')\n",
        "\n",
        "# Verificação do resultado\n",
        "print(f\"Texto limpo salvo em: {output_file_path}\")\n",
        "\n",
        "# Contar o número de linhas no arquivo de texto limpo\n",
        "line_count = len(cleaned_lines)\n",
        "print(f'O número de linhas no arquivo de texto limpo é: {line_count}')\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rP-IO7Td1TNQ"
      },
      "source": [
        "**Estruturação dos dados em Json**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "54Tzr4UdzzL5",
        "outputId": "daaac799-f538-4b48-bb24-34c248610f50"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "O número de linhas no arquivo JSON é: 306409\n",
            "Dados estruturados salvos em: /content/drive/MyDrive/machado/databasemachado1000.json\n"
          ]
        }
      ],
      "source": [
        "import json\n",
        "import os\n",
        "\n",
        "# Caminho do arquivo de texto limpo\n",
        "input_file_path = '/content/drive/MyDrive/machado/textonormalizado1000.txt'\n",
        "\n",
        "# Ler o conteúdo do arquivo limpo linha por linha e estruturar em formato JSON\n",
        "data = []\n",
        "with open(input_file_path, 'r', encoding='utf-8') as f:\n",
        "    for line in f:\n",
        "        # Adiciona cada linha como um dicionário separado\n",
        "        data.append({\"text\": line.strip()})\n",
        "\n",
        "# Caminho do arquivo JSON de saída\n",
        "output_json_path = '/content/drive/MyDrive/machado/databasemachado1000.json'\n",
        "\n",
        "# Salvar os dados estruturados em um arquivo JSON\n",
        "os.makedirs(os.path.dirname(output_json_path), exist_ok=True)\n",
        "with open(output_json_path, 'w', encoding='utf-8') as f:\n",
        "    json.dump(data, f, ensure_ascii=False, indent=4)\n",
        "\n",
        "# Contar o número de linhas no arquivo JSON\n",
        "with open(output_json_path, 'r', encoding='utf-8') as f:\n",
        "    data_loaded = json.load(f)\n",
        "    line_count = len(data_loaded)\n",
        "    print(f'O número de linhas no arquivo JSON é: {line_count}')\n",
        "\n",
        "# Verificação do resultado\n",
        "print(f\"Dados estruturados salvos em: {output_json_path}\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Contar o número de linhas no arquivo JSON\n",
        "with open(output_json_path, 'r', encoding='utf-8') as f:\n",
        "    data_loaded = json.load(f)\n",
        "    line_count = len(data_loaded)\n",
        "    print(f'O número de linhas no arquivo JSON é: {line_count}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Mt7MNR-MMn0",
        "outputId": "2e3560d4-02eb-404c-8480-c17280804ee0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "O número de linhas no arquivo JSON é: 306409\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
